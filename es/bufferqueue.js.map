{"version":3,"file":"bufferqueue.js","sources":["../src/Queue.js","../src/PriorityQueue.js","../src/EventManager.js","../src/Tools.js","../src/BufferQueue.js","../src/index.js"],"sourcesContent":["/**\n * A queue to add and pop string. It also provides an arbitrary remove function.\n * A queue is first-in-first-out.\n * Elements in this queue must be strings\n */\nclass Queue {\n\n  constructor() {\n    this._q = []\n    // this is to support the has function in constant time\n    this._keys = {}\n  }\n\n\n  /**\n   * Add a string at the end of the queue. Not added again if already in there.\n   * @param {string} str - some string to add\n   */\n  add(str) {\n    if (!(str in this._keys)){\n      this._q.unshift(str)\n      this._keys[str] = 1\n    }\n  }\n\n\n  /**\n   * Check if this queue contains a given string\n   * @return {boolean} true if this queue has a given string, false if not\n   */\n  has(str) {\n    return (str in this._keys)\n  }\n\n\n  /**\n   * Extract the first element\n   * @return {string} the first element\n   */\n  pop() {\n    let str = null\n    if(this._q.length){\n      str = this._q.pop()\n      delete this._keys[str]\n    }\n    return str\n  }\n\n\n  /**\n   * Is the queue empty?\n   * @return {boolean} true if empty, false if not\n   */\n  isEmpty() {\n    return !this._q.length\n  }\n\n\n  /**\n   * Get the number of element in the queue\n   * @param {number}\n   */\n  size() {\n    return this._q.length\n  }\n\n\n  /**\n   * Get the first element of the queue without removing it\n   * (Not sure how useful is that)\n   * @return {string}\n   */\n  first() {\n    return this._q.length ? this._q[0] : null\n  }\n\n\n  /**\n   * Get the last element of the queue without removing it\n   * (Not sure how useful is that)\n   * @return {string}\n   */\n  last() {\n    return this._q.length ? this._q[this._q.length - 1] : null\n  }\n\n\n  /**\n   * Remove an element from the queue and returns it\n   * @param {string} str - an element to remove\n   * @return {string | null}\n   */\n  remove(str) {\n    let strToRem = null\n    let index = this._q.indexOf(str)\n    if (index > -1) {\n      strToRem = this._q.splice(index, 1)\n      delete this._keys[strToRem]\n    }\n    return strToRem\n  }\n\n\n  /**\n   * Remove all the elements of the queue\n   */\n  reset() {\n    this._q = []\n    this._keys = {}\n  }\n\n}\n\n\nexport default Queue\n","import Queue from './Queue'\n\n/**\n * This priority queue works with levels of priority, 0 beeing the highest priority\n * and following level will be of decreasing priority.\n * In term of implementation, PriorityQueue instanciates N Queues, where N is the\n * number of priority levels. The number of priority levels has to be given at\n * the creation of a PriorityQueue instance.\n */\nclass PriorityQueue {\n  constructor(levels=3) {\n    this._qs = Array.from({length: levels}, () => new Queue())\n    this._probabilityMap = new Array(levels)\n    this._makeProbabilityMap()\n  }\n\n  _makeProbabilityMap() {\n    let levels = this._qs.length\n    let factors = Array.from({length: levels}, (x, i) => 1/Math.pow(2,i))\n    let factorSum = factors.reduce((acc, x) => acc + x)\n\n    for(let i=0; i<levels; i++) {\n      this._probabilityMap[i] = factors[i] / factorSum\n\n      if (i>0) {\n        this._probabilityMap[i] += this._probabilityMap[i-1]\n      }\n    }\n\n    console.log(this._probabilityMap)\n  }\n\n  /**\n   * Get the level of priority of a given string\n   * @return {number} zero is the highest priority, -1 means the element is NOT\n   * in the queue\n   */\n  getPriority(str) {\n    for(let i=0; i<this._qs.length; i++) {\n      if(this._qs[i].has(str)){\n        return i\n      }\n    }\n    return -1\n  }\n\n\n  /**\n   * Checks if a string is in the queue. Optionally, we can verify a specific\n   * level only.\n   * @param {string} str - string to verify the presence in the queue\n   * @param {number} priority - OPTIONAL the priority (must be in [0, level-1])\n   * @return {boolean}\n   */\n  has(str, priority=-1) {\n    if(~priority) {\n      return this._qs[priority].has(str)\n    }\n\n    for(let i=0; i<this._qs.length; i++) {\n      if(this._qs[i].has(str)){\n        return true\n      }\n    }\n    return false\n  }\n\n\n  /**\n   * Add a string to the queue with a given priority.\n   * If the string is already present in the queue with the same level of priority or higher, then nothing is done.\n   * If the string is already present but with a different level of priority, then\n   * it is removed and added with the provided level or priority.\n   * @param {string} str - the string to add\n   * @param {number} priority - the priority (must be in [0, level-1])\n   * @param {boolean} true if added, false if not (because already in with a higher priority)\n   */\n  add(str, priority) {\n    let existingPriority = this.getPriority(str)\n\n    if(existingPriority >= priority) {\n      return false\n    }\n\n    if(existingPriority >= 0) {\n      this.remove(str)\n    }\n\n    this._qs[priority].add(str)\n    return true\n  }\n\n\n  /**\n   * Get the the element with the highest priority and remove it from the queue\n   * @return {string|null} can return null if the queue is empty\n   */\n  pop_ORIG() {\n    for(let i=0; i<this._qs.length; i++) {\n      if(!this._qs[i].isEmpty()) {\n        return this._qs[i].pop()\n      }\n    }\n\n    return null\n  }\n\n\n  /**\n   * This version of pop relies on the probability map to make sure that some lower\n   * priorities items are getting popped every now and then, even if there are still\n   * elements in higher priority queues\n   */\n  pop() {\n    if(this.isEmpty()){\n      return null\n    }\n\n    // if the first(s) priorities are empty, we dont want to have the random seed\n    // within their range, so we pad if to make sure it lands in an area corresponding\n    // to some non-empty priority level\n    let probPadding = 0\n\n    for(let i=0; i<this._qs.length; i++){\n      if(this._qs[i].isEmpty()){\n        probPadding = this._probabilityMap[i]\n      } else if(probPadding !== 0) {\n        // in case we have empty, non-empty, empty. We want to stop at the first non-empty\n        break\n      }\n    }\n\n    let seed = probPadding + Math.random() * (1 - probPadding)\n    let levelToPop = 0\n\n    // check the level corresponding to the seed\n    for(let i=0; i<this._qs.length; i++){\n      if(seed < this._probabilityMap[i]) {\n        levelToPop = i\n        break\n      }\n    }\n\n    // if the seeded level is empty,\n    // we pop the one of higher priority that is non-empty\n    if(this._qs[levelToPop].isEmpty()) {\n      for(let i=levelToPop; i==0; i--) {\n        if(!this._qs[i].isEmpty()) {\n          return this._qs[i].pop()\n        }\n      }\n    }\n\n    return this._qs[levelToPop].pop()\n  }\n\n\n  /**\n   * Check if the priority queue is empty (= if all the per-level-queues are all empty)\n   * @return {boolean} true if empty, false if not empty\n   */\n  isEmpty() {\n    return this._qs.every(q => q.isEmpty())\n  }\n\n\n  /**\n   * Get the total number of elements in the priority queue, or optionnaly, for a specific\n   * level of priority\n   * @param {number} priority - OPTIONAL level of priority\n   * @param {number} number of elements\n   */\n  size(priority = -1) {\n    if(~priority) {\n      return this._qs[priority].size()\n    }\n\n    let s = 0\n    for(let i=0; i<this._qs.length; i++) {\n      s += this._qs[i].size()\n    }\n    return s\n  }\n\n\n  /**\n   * Get the size of the queue for each priority level\n   * @return {array}\n   */\n  sizePerPriority() {\n    return this._qs.map(q => q.size())\n  }\n\n\n  /**\n   * Note: this should be used as rarely as possible since it does not respect the logic\n   * of a queue.\n   * Remove an element. If null is returned, this means the element was not in the queue.\n   * @param {string} - str, the element to remove\n   * @return {string|null} the element that was jsut removed\n   */\n  remove(str) {\n    let elem = null\n    for(let i=0; i<this._qs.length; i++) {\n      elem = elem || this._qs[i].remove(str)\n    }\n    return elem\n  }\n\n\n  /**\n   * Reset the whole priority queue, empty it all. No value returned.\n   */\n  reset() {\n    for(let i=0; i<this._qs.length; i++) {\n      this._qs[i].reset()\n    }\n  }\n\n\n  /**\n   * Get a string status about the queue length per level\n   * @return {string}\n   */\n  getStatus() {\n    let status = ''\n    for(let i=0; i<this._qs.length; i++) {\n      status += `level ${i} >> ${this._qs[i].size()} elements\\n`\n    }\n\n    return status\n  }\n\n}\n\nexport default PriorityQueue\n","/**\n * The EventManager deals with events, create them, call them.\n * This class is mostly for being inherited from.\n */\nclass EventManager {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this._events = {}\n  }\n\n\n  /**\n   * Define an event, with a name associated with a function\n   * @param  {String} eventName - Name to give to the event\n   * @param  {Function} callback - function associated to the even\n   */\n  on(eventName, callback) {\n    if (typeof callback === 'function') {\n      if (!(eventName in this._events)) {\n        this._events[eventName] = []\n      }\n      this._events[eventName].push(callback)\n    } else {\n      console.warn('The callback must be of type Function')\n    }\n  }\n\n\n  emit(eventName, args = []) {\n    // the event must exist and be non null\n    if ((eventName in this._events) && (this._events[eventName].length > 0)) {\n      const events = this._events[eventName]\n      for (let i = 0; i < events.length; i += 1) {\n        events[i](...args)\n      }\n    } else {\n      //console.warn(`No function associated to the event ${eventName}`)\n    }\n  }\n}\n\nexport default EventManager\n","/**\n * Handy function to deal with option object we pass in argument of function.\n * Allows the return of a default value if the `optionName` is not available in\n * the `optionObj`\n * @param {Object} optionObj - the object that contain the options\n * @param {String} optionName - the name of the option desired, attribute of `optionObj`\n * @param {any} optionDefaultValue - default values to be returned in case `optionName` is not an attribute of `optionObj`\n */\nexport function getOption(optionObj, optionName, optionDefaultValue) {\n  return (optionObj && optionName in optionObj) ? optionObj[optionName] : optionDefaultValue\n}\n","import PriorityQueue from './PriorityQueue'\nimport EventManager from './EventManager'\nimport { getOption } from './Tools'\n\n\n/**\n *\n *\n * Emitted events:\n * - 'added': when a new element to download is added to the queue\n * - 'removed': when an element is removed (and will not be downloaded)\n * - 'reseted': when the whole queue is reseted\n * - 'downloading': when a file is starting to be downloading (after being popped from the queue)\n * - 'failed': when a file could not be downloaded properly (status above 2xx)\n * - 'aborted': when a file download is aborted by an explicit abort() call\n * - 'success': when a file has been successfully downloaded and converted into an ArrayBuffer\n *\n */\nclass BufferQueue extends EventManager {\n\n  /**\n   * @param {Object} options - the option object\n   * @param {number} options.priorityLevels - Number of levels of priority to have in the priority queue (default: 3)\n   * @param {number} options.concurentDownloads - number of concurent downloads possible (default: 4)\n   * @param {Headers} options.httpSettings - the optional settings for the HTTP request (default: {}) see 'init' object from https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n   */\n  constructor(options) {\n    super()\n    this._concurentDownloads = getOption(options, 'concurentDownloads', 4)\n    this._pq = new PriorityQueue(getOption(options, 'priorityLevels', 3))\n    this._httpSettings = getOption(options, 'httpSettings', {})\n    this._dlControllers = {} // keeps the 'signal' and tracks which files are currently being downloaded\n\n    let that = this\n    setInterval(function(){\n      that._tryNext()\n    }, 200)\n  }\n\n\n  /**\n   * Get the level of priority of a given string\n   * @return {number} zero is the highest priority, -1 means the element is NOT\n   * in the queue\n   */\n  getPriority(str) {\n    return this._pq.getPriority(str)\n  }\n\n\n  /**\n   * Checks if a string is in the queue. Optionally, we can verify a specific\n   * level only.\n   * @param {string} str - string to verify the presence in the queue\n   * @param {number} priority - OPTIONAL the priority (must be in [0, level-1])\n   * @return {boolean}\n   */\n  has(str, priority=-1) {\n    return this._pq.has(str, priority)\n  }\n\n\n  /**\n   * Add a string to the queue with a given priority.\n   * If the string is already present in the queue with the same level of priority or higher, then nothing is done.\n   * If the string is already present but with a different level of priority, then\n   * it is removed and added with the provided level or priority.\n   *\n   * Emits the event 'added' with the str as argument if properly added.\n   *\n   * @param {string} str - the string to add\n   * @param {number} priority - the priority (must be in [0, level-1])\n   * @param {boolean} true if added, false if not (because already in with a higher priority)\n   */\n  add(str, priority) {\n    if(str === 'http://127.0.0.1:8080/allen_10um_8bit/10um/1216-1280_256-320_512-576'){\n      console.log('>>>>>>>');\n    }\n\n    if(this._pq.add(str, priority)){\n      this.emit('added', [str, priority])\n      this._tryNext()\n    }\n  }\n\n\n  /**\n   * Check if the priority queue is empty (= if all the per-level-queues are all empty)\n   * @return {boolean} true if empty, false if not empty\n   */\n  isEmpty() {\n    return this._pq.isEmpty()\n  }\n\n\n  /**\n   * Get the total number of elements in the priority queue, or optionnaly, for a specific\n   * level of priority\n   * @param {number} priority - OPTIONAL level of priority\n   * @param {number} number of elements\n   */\n  size() {\n    return this._pq.size()\n  }\n\n\n  /**\n   * Get the size of the queue for each priority level\n   * @return {array}\n   */\n  sizePerPriority() {\n    return this._pq.sizePerPriority()\n  }\n\n\n  /**\n   * Note: this should be used as rarely as possible since it does not respect the logic\n   * of a queue.\n   * Remove an element. If null is returned, this means the element was not in the queue.\n   *\n   * Emits the event 'removed' if the str as argument if properly removed\n   *\n   * @param {string} - str, the element to remove\n   * @return {string|null} the element that was jsut removed\n   */\n  remove(str){\n    if(this._pq.remove(str)) {\n      this.emit('removed', [str])\n    }\n  }\n\n\n  /**\n   * Reset the whole priority queue, empty it all. No value returned.\n   *\n   * Emits the event 'reseted' without any argument\n   */\n  reset() {\n    this._pq.reset()\n    this._dlControllers = {}\n    this.emit('reseted', [])\n  }\n\n\n  abort(str) {\n    // TODO\n    if(str in this._dlControllers) {\n      this._dlControllers[str].abort()\n    }\n  }\n\n\n  abortAll() {\n    let k = Object.keys(this._dlControllers)\n    for(let i=0; i<k.length; i++) {\n      this._dlControllers[k[i]].abort()\n    }\n  }\n\n\n  _tryNext() {\n    let nbCurrentDl = Object.keys(this._dlControllers).length\n    if(nbCurrentDl >= this._concurentDownloads)\n      return\n\n    let toBeDl = this._pq.pop()\n\n    if(toBeDl) {\n      this._startDownload(toBeDl)\n    }\n  }\n\n\n  _startDownload(str){\n    let that = this\n\n\n    let myRequest = new Request(str ,this._httpSettings)\n\n    //let signal = new AbortController()\n    //this._dlControllers[str] = signal\n    this._dlControllers[str] = myRequest.signal\n\n    this.emit('downloading', [str])\n\n    fetch(myRequest/*, { signal }*/).then(response => {\n      if(!response.ok){\n        that.emit('failed', [url, response])\n        return null\n      }\n      return response.blob()\n    }).then(myBlob => {\n      delete that._dlControllers[str]\n\n      if(!myBlob)\n        return\n\n      let fileReader = new FileReader()\n      fileReader.onload = function(event) {\n        let buf = event.target.result\n        //that._tryNext()\n        that.emit('success', [str, buf])\n      }\n      fileReader.readAsArrayBuffer(myBlob)\n      that._tryNext()\n    }).catch(function(err) {\n      delete that._dlControllers[str]\n      that._tryNext()\n\n      if(err.code === 20){\n        that.emit('aborted', [str])\n      } else {\n        that.emit('failed', [str, err])\n      }\n    })\n  }\n\n\n  /**\n   * Get a string status of the prioirty queue size per level and the number of\n   * files currently being downloaded.\n   * @return {string}\n   */\n  getStatus() {\n    return `${this._pq.getStatus()}Current downloads: ${Object.keys(this._dlControllers).length}`\n  }\n\n\n}\n\nexport default BufferQueue\n","import BufferQueue from './BufferQueue'\n\nexport default ({\n  BufferQueue\n}) \n"],"names":[],"mappings":"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"}